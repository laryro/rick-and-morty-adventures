{"version":3,"sources":["components/CharacterList/index.jsx","components/Adventure/index.jsx","components/App/index.jsx","serviceWorker.js","index.js"],"names":["CharacterList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","characters","axios","get","concat","response","results","data","setState","console","log","map","character","react_default","a","createElement","src","image","alt","name","className","renderCharacters","Component","Adventure","dimension","components_CharacterList","App","components_Adventure","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAgDeA,cA1CX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,WAAY,IAJDR,mNAQQS,IAAMC,IAAN,GAAAC,OAXf,mCAWe,qBAAjBC,SACAC,EAAUD,EAASE,KAAKD,QAC9BV,KAAKY,SAAS,CACVP,WAAYK,IAEhBG,QAAQC,IAAIJ,gJAaZ,OATuBV,KAAKI,MAApBC,WACiBU,IAAI,SAACC,GAC1B,OACIC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAUK,MAAOC,IAAKN,EAAUO,OAC1CN,EAAAC,EAAAC,cAAA,SAAIH,EAAUO,0CAQ1B,OACIN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,kBACfP,EAAAC,EAAAC,cAAA,UAEQnB,KAAKyB,4BAnCGC,aCWbC,mLAZF,IACGC,EAAc5B,KAAKJ,MAAnBgC,UACR,OACIX,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACXP,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,8BAAqBF,EAAAC,EAAAC,cAAA,UAAKS,IAC1BX,EAAAC,EAAAC,cAACU,EAAD,cAPQH,aCaTI,0LAVX,OACEb,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACY,EAAD,CACEH,UAAU,kBALFF,cCQEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.67e1cacb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nconst URL_API = 'https://rickandmortyapi.com/api/';\n\nclass CharacterList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            characters: [],\n        }\n    }\n    async componentDidMount() {\n        const response = await axios.get(`${URL_API}character`);\n        const results = response.data.results;\n        this.setState({\n            characters: results,\n        })\n        console.log(results);\n    }\n\n    renderCharacters() {\n        const { characters } = this.state;\n        const chars = characters.map((character) => {\n            return (\n                <li>\n                    <img src={character.image} alt={character.name} />\n                    <p>{character.name}</p>\n                </li>\n            )\n        });\n        return chars;\n    }\n\n    render() {\n        return (\n            <div className=\"character-list\">\n            <ul>\n                {\n                    this.renderCharacters()\n                }\n            </ul>\n            </div>\n        )\n    }\n}\n\nexport default CharacterList;\n","import React, { Component } from \"react\";\nimport CharacterList from \"../CharacterList\";\n\nclass Adventure extends Component {\n    render() {\n        const { dimension } = this.props;\n        return (\n            <div className=\"adventure\">\n                <h1>Adventures of Rick and Morty</h1>\n                <h2>The dimension is <em>{dimension}</em></h2>\n                <CharacterList />\n            </div>\n        );\n    }\n}\n\nexport default Adventure;\n","import React, { Component } from 'react';\nimport Adventure from \"../Adventure\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Adventure\n          dimension=\"C-137\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}